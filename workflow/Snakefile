__author__ = "Jonas A"
__copyright__ = "Copyright 2021, Jonas A"
__email__ = "jonas.almlof@igp.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"
include: "rules/bcftools.smk"
include: "rules/call_small_cnv_deletions.smk"
include: "rules/call_small_cnv_amplifications.smk"
include: "rules/cnv_tsv_report.smk"
include: "rules/exon_skipping.smk"
include: "rules/fix_vcf_ad_for_qci.smk"
include: "rules/hotspot_report.smk"
include: "rules/house_keeping_gene_coverage.smk"
include: "rules/purecn_modify_vcf.smk"
include: "rules/report_gene_fuse.smk"
include: "rules/report_fusions.smk"


rule all:
    input:
        unpack(compile_output_list),


ruleorder: prealignment_fastp_pe > misc_bgzip
ruleorder: snv_indels_tabix > annotation_tabix_vcf > misc_tabix
ruleorder: snv_indels_gatk_mutect2 > misc_tabix
ruleorder: snv_indels_gatk_mutect2_gvcf > alignment_samtools_sort
ruleorder: snv_indels_gatk_mutect2_gvcf > misc_tabix
ruleorder: snv_indels_gatk_mutect2_gvcf > misc_bgzip
ruleorder: snv_indels_bgzip > misc_bgzip
ruleorder: annotation_bgzip_vcf > snv_indels_bcftools_sort
ruleorder: annotation_bgzip_vcf > snv_indels_bgzip
ruleorder: annotation_bgzip_vcf > misc_bgzip
ruleorder: annotation_tabix_vcf > misc_tabix
ruleorder: annotation_add_mosdepth_coverage_to_gvcf > misc_bgzip
ruleorder: annotation_bgzip_vcf > snv_indels_bgzip
ruleorder: annotation_tabix_vcf > snv_indels_tabix
ruleorder: annotation_bgzip_vcf > snv_indels_bcftools_sort
ruleorder: annotation_annotate_cnv > misc_bgzip
ruleorder: annotation_annotate_cnv > snv_indels_bgzip
ruleorder: filtering_bcftools_filter_include_region > annotation_bgzip_vcf
ruleorder: filtering_bcftools_filter_include_region > snv_indels_bgzip
ruleorder: filtering_bcftools_filter_include_region > misc_bgzip
ruleorder: qc_samtools_stats_rna > qc_samtools_stats
ruleorder: qc_picard_collect_alignment_summary_metrics_rna > qc_picard_collect_alignment_summary_metrics
ruleorder: qc_picard_collect_hs_metrics_rna > qc_picard_collect_hs_metrics
ruleorder: _copy_bam_index > alignment_samtools_index
ruleorder: alignment_samtools_extract_reads_rna > alignment_samtools_extract_reads


module prealignment:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/prealignment", path="workflow/Snakefile", tag="v1.0.0")
    config:
        config


use rule * from prealignment as prealignment_*


module alignment:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/alignment", path="workflow/Snakefile", tag="v0.3.1")
    config:
        config


use rule * from alignment as alignment_*


use rule star from alignment as alignment_star with:
    params:
        extra=lambda wildcards: "%s %s"
        % (
            config.get("star", {}).get("extra", ""),
            config.get("star", {}).get("read_group", generate_star_read_group(wildcards)),
        ),
        idx="{input.idx}",


use rule samtools_sort from alignment as alignment_samtools_sort_rna with:
    input:
        "fusions/star_fusion/{path_file}.out.bam",
    output:
        temp("fusions/star_fusion/{path_file}.out.sorted.bam"),
    log:
        "fusions/star_fusion/{path_file}.bam.sort.log",
    benchmark:
        repeat(
            "fusions/star_fusion/{path_file}.bam.sort.benchmark.tsv",
            config.get("samtools_sort", {}).get("benchmark_repeats", 1),
        )


use rule samtools_extract_reads from alignment as alignment_samtools_extract_reads_rna with:
    input:
        bam="alignment/star/{sample}_{type}.bam",
        bai="alignment/star/{sample}_{type}.bam.bai",
    wildcard_constraints:
        type="R",


use rule samtools_merge_bam from alignment as alignment_samtools_merge_bam_mutect2 with:
    input:
        bams=expand(
            "snv_indels/gatk_mutect2/{{sample}}_{{type}}_{chr}.unfiltered.bam",
            chr=extract_chr(
                "%s.fai" % (config.get("reference", {}).get("fasta", "")),
                filter_out=config.get("reference", {}).get("skip_chrs", []),
            ),
        ),
    output:
        bam=temp("snv_indels/gatk_mutect2_merge/{sample}_{type}.bam_unsorted"),
    params:
        extra=config.get("alignment_samtools_merge_bam_mutect2", {}).get("extra", ""),
    log:
        "snv_indels/gatk_mutect2_merge/{sample}_{type}.bam_unsorted.log",
    benchmark:
        repeat(
            "snv_indels/gatk_mutect2_merge/{sample}_{type}.bam_unsorted.benchmark.tsv",
            config.get("alignment_samtools_merge_bam_mutect2", {}).get("benchmark_repeats", 1),
        )


module snv_indels:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/snv_indels", path="workflow/Snakefile", tag="v0.3.0")
    config:
        config


use rule * from snv_indels as snv_indels_*


module annotation:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/annotation", path="workflow/Snakefile", tag="v0.3.0")
    config:
        config


use rule * from annotation as annotation_*


use rule bcftools_annotate from annotation as annotation_bcftools_annotate_purecn with:
    input:
        vcf="snv_indels/gatk_mutect2/{sample}_{type}.normalized.sorted.vep_annotated.filter.snv_hard_filter_purecn.vcf.gz",
        tbi="snv_indels/gatk_mutect2/{sample}_{type}.normalized.sorted.vep_annotated.filter.snv_hard_filter_purecn.vcf.gz.tbi",
        annotation_db="snv_indels/bcbio_variation_recall_ensemble/{sample}_{type}.ensembled.vep_annotated.filter.germline.exclude.blacklist.vcf.gz",
        annotation_db_tbi="snv_indels/bcbio_variation_recall_ensemble/{sample}_{type}.ensembled.vep_annotated.filter.germline.exclude.blacklist.vcf.gz.tbi",
    output:
        vcf=temp(
            "snv_indels/gatk_mutect2/{sample}_{type}.normalized.sorted.vep_annotated.filter.snv_hard_filter_purecn.bcftools_annotated_purecn.vcf"
        ),
    params:
        annotation_db=lambda wildcards, input: input.annotation_db,
        output_type=config.get("bcftools_annotate_purecn", {}).get("output_type", "z"),
        annotation_string=config.get("bcftools_annotate_purecn", {}).get("annotation_string", "-m DB"),
        extra=config.get("bcftools_annotate_purecn", {}).get("extra", ""),
    log:
        "snv_indels/gatk_mutect2/{sample}_{type}.normalized.sorted.vep_annotated.filter.snv_hard_filter_purecn.bcftools_annotated_purecn.vcf.log",
    benchmark:
        repeat(
            "snv_indels/gatk_mutect2/{sample}_{type}.normalized.sorted.vep_annotated.filter.snv_hard_filter_purecn.bcftools_annotated_purecn.vcf.benchmark.tsv",
            config.get("bcftools_annotate", {}).get("benchmark_repeats", 1),
        )


module filtering:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/filtering", path="workflow/Snakefile", tag="v0.1.0")
    config:
        config


use rule * from filtering as filtering_*


module qc:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/qc", path="workflow/Snakefile", tag="v0.3.0")
    config:
        config


use rule * from qc as qc_*


use rule mosdepth from qc as qc_mosdepth with:
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        bai="alignment/samtools_merge_bam/{sample}_{type}.bam.bai",
        bed=config.get("reference", {}).get("design_bed_rna", ""),
    wildcard_constraints:
        type="R",


use rule samtools_stats from qc as qc_samtools_stats with:
    wildcard_constraints:
        type="T|N",


use rule samtools_stats from qc as qc_samtools_stats_rna with:
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
    params:
        extra="%s -t %s"
        % (
            config.get("samtools_stats", {}).get("extra", ""),
            config.get("reference", {}).get("design_bed_rna", ""),
        ),
    wildcard_constraints:
        type="R",


use rule picard_collect_hs_metrics from qc as qc_picard_collect_hs_metrics with:
    wildcard_constraints:
        type="T|N",


use rule picard_collect_hs_metrics from qc as qc_picard_collect_hs_metrics_rna with:
    params:
        extra="%s %s"
        % (
            config.get("picard_collect_hs_metrics", {}).get("extra", ""),
            "VALIDATION_STRINGENCY=LENIENT",
        ),
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        bai="alignment/samtools_merge_bam/{sample}_{type}.bam.bai",
        bait_intervals=config.get("reference", {}).get("design_intervals_rna", ""),
        reference=config.get("reference", {}).get("fasta_rna", ""),
        target_intervals=config.get("reference", {}).get("design_intervals_rna", ""),
    wildcard_constraints:
        type="R",


use rule picard_collect_alignment_summary_metrics from qc as qc_picard_collect_alignment_summary_metrics with:
    wildcard_constraints:
        type="T|N",


use rule picard_collect_alignment_summary_metrics from qc as qc_picard_collect_alignment_summary_metrics_rna with:
    params:
        extra="%s %s"
        % (
            config.get("picard_collect_alignment_summary_metrics", {}).get("extra", ""),
            "VALIDATION_STRINGENCY=LENIENT",
        ),
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        bai="alignment/samtools_merge_bam/{sample}_{type}.bam.bai",
        ref=config.get("reference", {}).get("fasta_rna", ""),
    wildcard_constraints:
        type="R",


module biomarker:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/biomarker", path="workflow/Snakefile", tag="v0.3.1")
    config:
        config


use rule * from biomarker as biomarker_*


use rule cnvkit2scarhrd from biomarker as biomarker_cnvkit2scarhrd with:
    input:
        seg="cnv_sv/cnvkit_call_hrd/{sample}_{type}.{tc_method}.loh.cns",


module fusions:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/fusions", path="workflow/Snakefile", tag="8aec226")
    config:
        config


use rule * from fusions as fusions_*


use rule fuseq_wes from fusions as fusions_fuseq_wes with:
    priority: 50


use rule star_fusion from fusions as fusions_star_fusion with:
    output:
        bam=temp("fusions/star_fusion/{sample}_{type}/Aligned.out.bam"),
        fusions=temp("fusions/star_fusion/{sample}_{type}/star-fusion.fusion_predictions.tsv"),
        fusions_abridged=temp("fusions/star_fusion/{sample}_{type}/star-fusion.fusion_predictions.abridged.coding_effect.tsv"),
        sj=temp("fusions/star_fusion/{sample}_{type}/SJ.out.tab"),


module cnv_sv:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/cnv_sv", path="workflow/Snakefile", tag="v0.3.1")
    config:
        config


use rule * from cnv_sv as cnv_sv_*


use rule manta_config_t from cnv_sv as cnv_sv_manta_config_t with:
    priority: 40


use rule manta_run_workflow_t from cnv_sv as cnv_sv_manta_run_workflow_t with:
    priority: 40


use rule cnvkit_batch from cnv_sv as cnv_sv_cnvkit_batch_hrd with:
    input:
        bam="alignment/samtools_merge_bam/{sample}_{type}.bam",
        bai="alignment/samtools_merge_bam/{sample}_{type}.bam.bai",
        cnv_reference=config.get("cnvkit_batch_hrd", {}).get("normal_reference_hrd", ""),
    output:
        regions=temp("cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.cnr"),
        segments=temp("cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.cns"),
        segments_called=temp("cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.call.cns"),
        bins=temp("cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.bintest.cns"),
        target_coverage=temp("cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.targetcoverage.cnn"),
        antitarget_coverage=temp("cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.antitargetcoverage.cnn"),
    log:
        "cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.log",
    benchmark:
        repeat(
            "cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.benchmark.hrd.tsv",
            config.get("cnvkit_batch_hrd", {}).get("benchmark_repeats", 1),
        )


use rule cnvkit_call from cnv_sv as cnv_sv_cnvkit_call_hrd with:
    input:
        segment="cnv_sv/cnvkit_batch_hrd/{sample}/{sample}_{type}.cns",
        vcf="snv_indels/bcbio_variation_recall_ensemble/{sample}_{type}.ensembled.vep_annotated.filter.germline.exclude.blacklist.vcf.gz",
        tc_file=get_tc_file,
    output:
        segment=temp("cnv_sv/cnvkit_call_hrd/{sample}_{type}.{tc_method}.loh.cns"),
    params:
        tc=get_tc,
        extra=config.get("cnvkit_call_hrd", {}).get("extra", ""),
    log:
        "cnv_sv/cnvkit_call_hrd/{sample}_{type}.{tc_method}.loh.cns.log",
    benchmark:
        repeat(
            "cnv_sv/cnvkit_call_hrd/{sample}_{type}.{tc_method}.loh.cns.benchmark.tsv",
            config.get("cnvkit_call_hrd", {}).get("benchmark_repeats", 1),
        )


use rule cnvkit_call from cnv_sv as cnv_sv_cnvkit_call with:
    input:
        segment="cnv_sv/cnvkit_batch/{sample}/{sample}_{type}.cns",
        vcf="snv_indels/bcbio_variation_recall_ensemble/{sample}_{type}.ensembled.vep_annotated.filter.germline.exclude.blacklist.vcf.gz",
        tc_file=get_tc_file,
    params:
        extra=config.get("cnvkit_call", {}).get("extra", ""),
        tc=get_tc,


use rule cnvkit_scatter from cnv_sv as cnv_sv_cnvkit_scatter with:
    input:
        segments="cnv_sv/cnvkit_batch/{sample}/{sample}_{type}.cns",
        segment_regions="cnv_sv/cnvkit_batch/{sample}/{sample}_{type}.cnr",
        vcf="snv_indels/bcbio_variation_recall_ensemble/{sample}_{type}.ensembled.vep_annotated.filter.germline.exclude.blacklist.vcf.gz",


use rule gatk_to_vcf from cnv_sv as cnv_sv_gatk_to_vcf with:
    input:
        segment="cnv_sv/gatk_model_segments/{sample}_{type}.clean.modelFinal.seg",
        tc_file=get_tc_file,
    params:
        dup_limit=config.get("gatk_vcf", {}).get("dup_limit", 2.5),
        het_del_limit=config.get("gatk_vcf", {}).get("het_del_limit", 1.5),
        hom_del_limit=config.get("gatk_vcf", {}).get("hom_del_limit", 0.5),
        sample_id="{sample}_{type}",
        #tc=lambda wildcards: get_sample(samples, wildcards)["tumor_content"],
        tc=get_tc,


use rule purecn from cnv_sv as cnv_sv_purecn with:
    input:
        unpack(cnv_sv.get_purecn_inputs),
        vcf="cnv_sv/purecn_modify_vcf/{sample}_{type}.normalized.sorted.vep_annotated.filter.snv_hard_filter_purecn.bcftools_annotated_purecn.mbq.vcf.gz",
        tbi="cnv_sv/purecn_modify_vcf/{sample}_{type}.normalized.sorted.vep_annotated.filter.snv_hard_filter_purecn.bcftools_annotated_purecn.mbq.vcf.gz.tbi",


module reports:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/reports", path="workflow/Snakefile", tag="v0.1.0")
    config:
        config


use rule * from reports as reports_*


use rule cnv_html_report from reports as reports_cnv_html_report with:
    params:
        include_table=config.get("cnv_html_report", {}).get("show_table", True),
        tc=get_tc,
        tc_method=lambda wildcards: wildcards.tc_method,


module misc:
    snakefile:
        get_module_snakefile(config, "hydra-genetics/misc", path="workflow/Snakefile", tag="v0.2.0")
    config:
        config


use rule tabix from misc as misc_tabix


use rule bgzip from misc as misc_bgzip
