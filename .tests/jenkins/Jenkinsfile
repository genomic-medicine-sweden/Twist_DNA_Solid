def isPullRequest = false

pipeline {
  agent { label 'jenkins-ssh-agent' }
  stages {
    stage('First stage') {
      steps {
        script {
          isPullRequest = env.CHANGE_ID != null
        }
        sh 'printenv'
      }
    }
    stage('develop') {
      when {
          anyOf {
                 expression { isPullRequest == false && env.BRANCH_NAME == 'develop' }
          }
      }
      steps {
        sshagent(['jenkins-ssh-agent']) {
          sh '''#!/bin/bash
                virtualenv venv -p python3.9
                source venv/bin/activate
                pip3 install -r requirements.txt
                mkdir -p develop/slurm_out
                cp -r config develop/
                cp .tests/jenkins/units_develop.tsv develop/units.tsv
                cp .tests/jenkins/samples_develop.tsv develop/samples.tsv
                cp .tests/jenkins/resources.yaml develop/config/resources.yaml
                cp .tests/jenkins/test_input_develop.tsv develop/test_input.tsv

                cd develop
                git clone https://github.com/clinical-genomics-uppsala/GMS560_config
                snakemake -s ../workflow/Snakefile --profile ../.tests/jenkins/profile --configfiles GMS560_config/config/config_production_pipeline.yaml config/config.yaml -w 60 --notemp --keep-incomplete
                git clone https://github.com/clinical-genomics-uppsala/validation_workflow.git
                nextflow run validation_workflow/validate_result.nf
             '''
         }
       }
    }
    stage('main') {
      when {
          anyOf {
                 expression { isPullRequest == false && env.BRANCH_NAME == 'master' }
          }
      }
      steps {
        sshagent(['jenkins-ssh-agent']) {
          sh '''#!/bin/bash
              virtualenv venv -p python3.9
              source venv/bin/activate
              pip3 install -r requirements.txt
              mkdir -p main/slurm_out
              cp -r config main/
              cp .tests/jenkins/units_main.tsv main/units.tsv
              cp .tests/jenkins/samples_main.tsv main/samples.tsv
              cp .tests/jenkins/resources.yaml main/config/resources.yaml
              cp .tests/jenkins/test_input_main.tsv main/test_input.tsv

              cd main
              git clone https://github.com/clinical-genomics-uppsala/GMS560_config
              snakemake -s ../workflow/Snakefile --profile ../.tests/jenkins/profile --configfiles GMS560_config/config/config_production_pipeline.yaml config/config.yaml -w 60 --notemp --keep-incomplete
              git clone https://github.com/clinical-genomics-uppsala/validation_workflow.git
              nextflow run validation_workflow/validate_result.nf
             '''
         }
       }
    }
  }
  post {
    always {
      cleanWs(cleanWhenSuccess: true, cleanWhenFailure: false)

      dir("${env.WORKSPACE}@tmp") {
        deleteDir()
      }
      dir("${env.WORKSPACE}@script") {
        deleteDir()
      }
      dir("${env.WORKSPACE}@script@tmp") {
        deleteDir()
      }
    }
  }
}
